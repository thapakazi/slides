#+TITLE: Being Productive
#+DESCRIPTION: Lunch and Learn @cloudfactory on Thu Aug 6 2015
#+DATE: Thursday, Aug 06 2015
#+EMAIL: iksha@cloudfactory.com, milan@cloudfactory.com
#+STARTUP: content inlineimages
#+OPTIONS: num:nil toc:nil H:1 creator:nil author:nil email:t

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.1.50.1 (<a href="http://orgmode.org">Org</a> mode 8.3.2)
#+LATEX_HEADER:


[[./lazy-ninja.gif]]
* CONTENTS:
   - tmux & tmuxinator 
   - vi [presenter: [[http://github.com/xha003/][xhagrg]]]
   - brower plugins
   - shell-tips/tricks
** TMUX/TMUXINATOR
*** TMUX
  + use-case:
    - iTerm2 startup in early morning 
       *...will be show in demo*
    - watching over irritating logs on server
    - tired of screen-process #hard to collaborate

  + intro:
   #+CAPTION: Tmux Readme
   #+NAME:   fig:tmux-intro
     [[./tmux-readme.png]]

  + tmux in action:
   #+CAPTION: Tmux in action
   #+NAME:   fig:tmux-in-action
     [[./tmux-in-action.png]]

*** TMUXINATOR

    its a *gem* to manage the tmux session
+ step1: installtion

    #+BEGIN_EXAMPLE
    gem install tmuxinator
    #+END_EXAMPLE
    
+ step2: configuration
      
    #+BEGIN_EXAMPLE
    $ export EDITOR=your_awesome_editor
    $ mux new your_awesome_project_name  #yaml config generated at ~/.tmuxinator/
    #+END_EXAMPLE

+ step3: run
    #+BEGIN_EXAMPLE
    $ mux your_awesome_project_name
    #+END_EXAMPLE
   
+ [[http://showterm.io/0cae8fa10041acea1a311][demo:]]

+ Extra for *iTerm* Users

  first detatch **ctrl+a d** and:
  #+BEGIN_EXAMPLE
  $ tmux ls
  $ tmux -CC attach -t session_name
  #+END_EXAMPLE

** VI

    - modal editing of file, 
       Eg: w for word; who needs to remember that
    
    #+BEGIN_EXAMPLE
    - self.quit()  
        reason: me eamcs aficionado   
    #+END_EXAMPLE
    - vim & packages
      - vim: improved vi
      - pkgs: 
        - nerdtree
        - fugitive
        - ctrlp
      - pkg_mgmt pkgs:
        - vundler 
        - pathogen
        


** Browser Plugins
   - [[https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en][jsonview]]
      #+BEGIN_SRC json
   {
    "checks": {
        "memory": {
            "handlers": ["mailer"],
            "command": "check_disk.rb -w 80 -c 90",
            "interval": 5,
            "severities": ["critical","warning"],
            "subscribers": ["core"],
            "refresh": 900
        }
    }
   }
   #+END_SRC

   - [[https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en][vimium]]
   - [[https://github.com/mooz/keysnail/wiki][keysnail]] (for firefox users like me :D)


** TIPS/TRICKS

+ picpaste 

  motivation: share local image with at go
  
  #+BEGIN_SRC sh
  # http://www.picpaste.com/ :Put your pictures online, easy and quick
  # Storage time: 30mins(1) to unlimited(9)
  # Supported formats: Only JP(E)G, PNG, GIF, BMP
  # Size limit =< 7 megabyte 
  picpaste () {
   opts=( -F storetime=1 -F addprivacy=1 -F rules=yes )
   link=http://www.picpaste.com/upload.php
   curl -sA firefox "${opts[@]}" -F upload=@"$1" "$link" \
      | sed -n '/Picture URL/{n;s/.*">//;s/<.*//p}'
  }
  #+END_SRC

+ [[https://github.com/defunkt/gist][gist]]
  
  The gist gem provides a gist command that you can use from your terminal to upload content to https://gist.github.com/.
   #+BEGIN_SRC sh
   $ gem install gist          #installing gist
   $ gist -Pp -f filname.rb    #private gist from clipboard
   $ gist --login                   #to login to github
   $ gist -h                   #further exploration
   #+END_SRC

+ my personal favorites
  + need to share your aws export to your friend 
    #+BEGIN_EXAMPLE
    env| grep -i aws | nc -l -p 1234  # dont use -p options *Mac USERS*
    
     #then give http://your.192.168.ip:1234 to your friend
     # or ask him to takt it from nc form his/her terminal like:
     nc 192.168.ip.ip 1234
    #+END_EXAMPLE

  + history search with ease
    
    - make an alias *hist*
      #+BEGIN_EXAMPLE
      alias hist='history | grep $1' #merge of grep and history
      #+END_EXAMPLE
    - Eg: forgot your old crontab command ??
     #+BEGIN_EXAMPLE
       $ hist crontab
    
       7857  crontab -e
       8478  cfssh my-prod-serverXY2 -l deploy 'crontab -l'
       9577  crontab -l


     #+END_EXAMPLE
  + नेट लास्टै slow छ हो ??
    #+BEGIN_SRC sh
    mtr -n github.com
    #+END_SRC
  + tired of ps aux|grep sidekiq && kill -9 XXXX
    #+BEGIN_SRC sh
    pgrep -fil sidekiq      # to know your process
    pkill -STOP sidekiq     # stop the sidkiq process
    #+END_SRC
    *DISCLAIMER*: DON'T TRY IT IN +HOME+ PRODUCTION

  + etc
    - helper function
      #+BEGIN_SRC sh
      mkcd () {  mkdir "$1";cd "$1"}  #make dir and enter inside at one go
      #+END_SRC
    - managing multiple aws keys
      #+BEGIN_SRC sh
      source ~/.my_aws_keys_for && run deployment syntax
      #+END_SRC
    - less is more
       #+BEGIN_SRC sh
       less ~/app/logs/production.log #use it like readonly mode of vi
       #+END_SRC
    - kill the tmux session
       #+BEGIN_EXAMPLE
       tmux ls  # list the running session                              
       tmux kill-session -t my_session_name  #kill the session
       #+END_EXAMPLE



+ More awesome stuffs/ Refrences
  - [[http://git.io/vqfT9][the-art-of-command-line]]
  - vim configs [[https://github.com/xha003/config_files][xha]]
  - [[http://uploads.mitechie.com/books/tmux_p1_1.pdf][tmux: Productive Mouse-Free Development]] (found@google)
  - [[http://www.railsonmaui.com/blog/2014/03/11/rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/][Rocking With Tmux, Tmuxinator, Guard, Zeus, and iTerm2 for Rails Development]]
   



   
